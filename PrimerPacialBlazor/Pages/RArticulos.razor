@page "/Articulos"
@page "/Articulo/{ArticuloId:int}"

@inject IToastService Toast

<div class="shadow-lg p-3 mb-5 bg-white rounded">
    <EditForm Model="articulos" OnInvalidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="card">

            <div class="card-header">
                <h2>Registro de Articulos</h2>
            </div>

            <div class="card-body">
                <form>

                    @*ArticuloId*@
                    <div class="form-row align-items-center">
                        <div class="form-group">
                            <label>Articulo Id</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="articulos.ArticuloId" class="form-control" />
                                <div class="input-group-append">
                                    <button type="button" style="z-index:0" class="btn btn-secondary input-group-text" @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Descripcion*@
                    <div class="form-group">
                        <label>Descripción</label>
                        <InputTextArea @bind-Value="articulos.Descripcion" class="form-control" />
                        <ValidationMessage For="@(() => articulos.Descripcion)" />
                    </div>

                    @*Existencia*@
                    <div class="form-group">
                        <label>Existencia</label>
                        <InputNumber @bind-Value="articulos.Existencia" class="form-control" />
                        <ValidationMessage For="@(() => articulos.Existencia)" />
                    </div>

                    @*Costo*@
                    <div class="form-group">
                        <label>Costo</label>
                        <InputNumber @bind-Value="articulos.Costo" @onfocusout="CalcularValorInventario" class="form-control" />
                        <ValidationMessage For="(() => articulos.Costo)" />
                    </div>

                    @*ValorInventario*@
                    <div class="form-group">
                        <label>Valor Inventario</label>
                        <InputNumber @bind-Value="articulos.ValorInventario" class="form-control" readOnly="true" />
                        <ValidationMessage For="(() => articulos.ValorInventario)" />
                    </div>

                </form>
            </div>

            @*Botones*@
            <div class="card-footer">
                <div class="form-grup text-center" display: inline-block>
                    <button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo</button>
                    <button type="button" class="btn btn-success" @onclick="Guardar">Guardar</button>
                    <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
                </div>
            </div>

        </div>

    </EditForm>
</div>

<h3>RArticulos</h3>

@code {

    Articulos articulos = new Articulos();

    [Parameter]
    public int ArticuloId { get; set; }

    [Inject]
    private ArticulosBLL articulosBLL { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
    }

    private void CalcularValorInventario()
    {
        double Resultado = (articulos.Existencia * articulos.Costo);

        articulos.ValorInventario = Resultado;
    }

    public void Nuevo()
    {
        Limpiar();
    }

    public void Limpiar()
    {
        this.articulos = new Articulos();
    }

    public async void Buscar()
    {
        var articulo = await articulosBLL.Buscar(articulos.ArticuloId);
        if(articulo != null)
        {
            this.articulos = articulo;
        }
        else
        {
            Toast.ShowInfo("No se encontro el registro");
        }
    }

    public async void Guardar()
    {
        if (await articulosBLL.Guardar(articulos))
        {
            Toast.ShowSuccess("Guardado");
            Limpiar();
        }
        else
        {
            Toast.ShowError("No fue posible guardar");
        }
    }

    public async void Eliminar()
    {
        if (await articulosBLL.Eliminar(articulos.ArticuloId))
        {
            Toast.ShowSuccess("Eliminado correctamente.");
            Limpiar();
        }
        else
        {
            Toast.ShowError("No fue posible eliminar.");
        }
    }

}
